import { NextRequest, NextResponse } from "next/server";
import created from "./func/created";
import { getVolunteer } from "./func/getVolunteer";
import { Prisma } from "@prisma/client";

export const POST = async (request: NextRequest) => {
  console.log(`---------- route ‡∏™‡∏°‡∏±‡∏Ñ‡∏£üî® ---------`);
  try {
    const body = await request.json();
    console.log(`---------- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á  üî® ---------`);
    console.log(body);
    const create = await created(body);
    return NextResponse.json({
      message: "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: create,
    });
  } catch (error) {
    console.log(error);
    let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏";
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      // Error handling for prisma CRUD error
      if (error.code === "P2002") message = "‡∏°‡∏µ email ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô";
    } else {
      // Error handling for other errors
      if (error instanceof Object && !(error instanceof Error))
        message = JSON.stringify(error);
      if (error instanceof Error) message = error.message;
      if (typeof error == "string") message = error;
    }

    return NextResponse.json(message, { status: 400 });
  }
};

export const GET = async (request: NextRequest) => {
  try {
    const volunteer = await getVolunteer();
    return NextResponse.json({ message: `get ‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, data: volunteer });
  } catch (error) {
    let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏";
    if (error instanceof Object && !(error instanceof Error))
      message = JSON.stringify(error);
    if (error instanceof Error) message = error.message;
    if (typeof error == "string") message = error;
    return NextResponse.json({ message }, { status: 400 });
  }
};
